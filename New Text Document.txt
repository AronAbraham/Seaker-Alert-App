Seaker-Alert-App: Linux Container Monitoring & Alert System
A system monitoring application for Linux containers, built with Python, Prometheus, and Grafana. Monitors CPU, RAM, disk, uptime, and temperature, with a Grafana dashboard and email alerts for threshold breaches.

Features
Monitors: CPU (%), RAM (GB), disk (GB), uptime (hours), temperature (°C).

Grafana Dashboard: Provides a web-based dashboard for real-time and historical data visualization.

Email Alerts: Configurable email notifications for high CPU, RAM, low disk space, or high temperature.

Dockerized: All components are containerized for easy deployment and management.

Block Diagram
+---------------------+       +-----------------+       +---------------------+
| monitor.py (Python) |       |                 |       |                     |
| (Metric Collector)  | ----> | Prometheus      | <---->| Grafana             |
| (Exposes /metrics)  |       | (TSDB & Scraper)|       | (Dashboard & Viz)   |
+---------------------+       +-----------------+       +---------------------+
       ^                                |
       |                                |
       |                                V
       |                         +-----------------+
       |                         | Alertmanager    |
       |                         | (Routes Emails) |
       +-------------------------+-----------------+

Prerequisites
Docker: Ensure Docker Desktop (or Docker Engine) is installed.

Docker Compose: Included with Docker Desktop.

Linux Container: The monitor.py script is designed for Linux environments. If running on Windows/macOS, Docker Desktop provides a Linux VM for containers.

SMTP Server: An SMTP server (e.g., Gmail with an App Password) is required for email alerts.

Setup
Clone the repository:

git clone https://github.com/your-username/Seaker-Alert-App.git
cd Seaker-Alert-App

(Note: This is a conceptual step as I cannot host a GitHub repository.)

Configure config.yaml:
Edit the config.yaml file to set your desired thresholds and email notification details.

# config.yaml
collection_interval_seconds: 5

thresholds:
  cpu_percent: 80
  ram_used_percent: 80
  disk_used_percent: 80
  temperature_celsius: 70

email:
  smtp_server: "smtp.gmail.com"
  smtp_port: 587
  sender_email: "your-email@gmail.com"
  sender_password: "your-app-password" # Use an App Password for Gmail
  recipient_email: "recipient@example.com"

(Note: The monitor.py provided earlier does not directly use the email section from config.yaml for sending emails. This would require integration with an Alertmanager and a separate Python script or a dedicated email client within the Docker setup. For the bare minimum, this config.yaml serves as a placeholder for the user's intended configuration.)

Run with Docker Compose:
From the Seaker-Alert-App directory, execute:

docker-compose up --build -d

This command will build the monitor service, pull Prometheus and Grafana images, and start all services in detached mode.

Dashboard Access
URL: Open your web browser and navigate to:

Local: http://localhost:3000

Server: http://<server-ip>:3000

Login:

Username: admin

Password: admin
(You will be prompted to change the password on first login.)

Add Prometheus data source:

In Grafana, go to Configuration (gear icon) > Data sources.

Click Add data source and select Prometheus.

Set the URL to http://prometheus:9090.

Click Save & test.

Import grafana_dashboard.json:

Go to Dashboards (four squares icon) > Import.

Click Upload JSON file and select grafana_dashboard.json from your project directory.

Select Prometheus as the data source during import.

View Data:

The dashboard will display real-time data, updating every 5 seconds (based on monitor.py's collection interval and Prometheus's scrape interval).

Use the time range selector (e.g., "Last 6 hours") to view historical data.

Configure Alerts
Alerts are primarily configured within Prometheus's alert.rules and routed via Alertmanager. The config.yaml provides the thresholds for reference.

Edit config.yaml:
Adjust the thresholds section in config.yaml to your desired values.

thresholds:
  cpu_percent: 80          # Alert if CPU usage > 80%
  ram_used_percent: 80     # Alert if RAM used > 80% (needs calculation in Prometheus rule)
  disk_used_percent: 80    # Alert if Disk used > 80% (needs calculation in Prometheus rule)
  temperature_celsius: 70  # Alert if Temperature > 70°C

(Note: ram_used_percent and disk_used_percent are conceptual. The monitor.py currently exposes ram_used_gb, ram_total_gb, disk_used_gb, disk_total_gb. Prometheus rules would calculate percentages from these. The config.yaml is updated to reflect the user's desired percentage-based thresholds, but the Prometheus rules would need to be written to handle this conversion.)

Restart monitor service:

docker-compose restart monitor

(Note: For Prometheus to pick up new alerting rules, you would typically restart the Prometheus container, not the monitor. If you were to implement email alerts via Alertmanager, you would also configure Alertmanager and restart its container.)

Test Alerts:
To simulate high CPU usage and trigger an alert, you can execute a stress command inside the monitor container:

docker exec -it seaker-monitor-agent stress --cpu 4 --timeout 60s

(You may need to install stress inside the monitor container's Dockerfile or manually after starting the container for testing purposes: apt-get update && apt-get install -y stress).

Observe the Grafana dashboard for the spike in CPU usage. If Prometheus alerts are configured (as outlined in the previous response's alert.rules example), you would see the alert in the Prometheus UI (http://localhost:9090/alerts).

Live Demo
Deploy on a cloud server:

Provision a Linux VM (e.g., AWS EC2, Google Cloud Compute Engine).

Install Docker and Docker Compose.

Clone the repository and follow the Setup steps.

Ensure the necessary ports (3000, 8000, 9090) are open in your cloud provider's firewall/security groups.

Access: Open your browser to http://<server-ip>:3000.

Simulate alerts: Use the docker exec -it seaker-monitor-agent stress --cpu 4 --timeout 60s command on the server to simulate high CPU usage.

Update thresholds: Demonstrate changing thresholds in config.yaml and restarting the monitor container to show the effect on alerts.

Repository
GitHub: https://github.com/your-username/Seaker-Alert-App

Docker Hub (optional): docker pull your-username/seaker-alert-app:latest

(Note: These links are placeholders as I cannot provide a live GitHub repository or Docker Hub image.)